% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_DataQuality_utils.R
\name{dq_conflicting_income}
\alias{dq_conflicting_income}
\title{Find Conflicting Income yes/no at Entry or Exit}
\usage{
dq_conflicting_income(
  served_in_date_range,
  IncomeBenefits,
  vars,
  guidance,
  app_env = get_app_env(e = rlang::caller_env())
)
}
\arguments{
\item{served_in_date_range}{\code{(data.frame)} See \code{served_in_date_range}}

\item{IncomeBenefits}{\code{(data.frame)} From the HUD CSV Export}

\item{vars}{\code{(named list)}
\itemize{
\item{\code{prep}}{ Column names for Prep}
\item{\code{we_want}}{ Column names for output}
}}

\item{guidance}{\code{(list)} See \code{guidance}}

\item{app_env}{\code{(app_env)} Object containing dependencies. If all arguments to this function are saved in the \code{app_env}, then they will be called from there and arguments do not need to be specified.}
}
\value{
\code{(data.frame)} \code{vars$we_want} and \code{Issue} (Issue Name), \code{Type} (Error or Warning), and \code{Guidance} (How to correct the issue)
}
\description{
If the user answered Yes to Income from any source, then  there should be an income sub-assessment where it indicates which type of income the client is receiving. Similarly if the user answered No, there should not be any income records that say the client is receiving that type of income.
}
\seealso{
Other DQ: Income Checks: 
\code{\link{dq_missing_income}()}

Other DQ: EE Checks: 
\code{\link{dq_duplicate_ees}()},
\code{\link{dq_future_ees}()},
\code{\link{dq_future_exits}()},
\code{\link{dq_missing_income}()}
}
\concept{DQ: EE Checks}
\concept{DQ: Income Checks}
