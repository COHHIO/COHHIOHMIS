% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/app_dependencies.R
\name{app_env}
\alias{app_env}
\title{Easily extract dependencies and pass them between functions}
\description{
Save dependencies for future functions in an environment and put app dependencies into lists
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{\code{(list)}}}{with all app dependencies as objects}

\item{\code{\code{(list)}}}{with all app dependencies as character vectors}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{\code{(list)}}}{with all app dependencies as objects}

\item{\code{\code{(list)}}}{with all app dependencies as character vectors}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-gather_deps}{\code{app_env$gather_deps()}}
\item \href{#method-merge_deps_to_env}{\code{app_env$merge_deps_to_env()}}
\item \href{#method-write_app_deps}{\code{app_env$write_app_deps()}}
\item \href{#method-new}{\code{app_env$new()}}
\item \href{#method-clone}{\code{app_env$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gather_deps"></a>}}
\if{latex}{\out{\hypertarget{method-gather_deps}{}}}
\subsection{Method \code{gather_deps()}}{
Gather the objects passed to \code{app_env}s internal environment to be passed to subsequent functions. Save app dependencies into a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$gather_deps(
  ...,
  app_deps = self$app_deps,
  env = rlang::caller_env(),
  .args = names(rlang::fn_fmls(rlang::call_fn(rlang::call_standardise(match.call(call =
    sys.call(1))))))
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{\code{(objects)} Dependencies for subsequent functions, passed as objects and not character vector of names. Use \code{"everything"} to capture all objects from the parent environment.}

\item{\code{app_deps}}{\code{(named list)} with items for each app that contain character vectors of the objects each app depends on to be saved.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-merge_deps_to_env"></a>}}
\if{latex}{\out{\hypertarget{method-merge_deps_to_env}{}}}
\subsection{Method \code{merge_deps_to_env()}}{
Pass all dependencies saved from previous functions to an environment for use
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$merge_deps_to_env(nms, env = rlang::caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nms}}{\code{(character)} of the names of the dependencies to load into the \code{env}. \strong{Default} load all previously stored objects.}

\item{\code{env}}{\code{(environment)} to pass dependencies to. \strong{Default} the calling environment}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write_app_deps"></a>}}
\if{latex}{\out{\hypertarget{method-write_app_deps}{}}}
\subsection{Method \code{write_app_deps()}}{
Write app dependencies to disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$write_app_deps(
  app_deps = self$app_deps,
  paths = purrr::imap_chr(self$app_deps, ~file.path("data", "db", .y)),
  accessor = function(x = as.character(match.call()[[1]]), path = "data/db", ...) {    
    .file <- list.files(path, pattern = paste0("^", x, "\\\\."), full.names = TRUE)    
    ext <- stringr::str_extract(basename(.file), "(?<=\\\\.)\\\\w+$")     load_fun <-
    file_io_fn(ext = ext)     load_fun(file) }
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{app_deps}}{\code{(named list)} with each name corresponding to an app with each item containing a character vector of the app dependencies. \strong{Default} the \code{app_deps} stored in the public field \code{app_env\$app_deps}.}

\item{\code{paths}}{\code{(named list)} Paths to write app dependencies to, one path for each app in \code{app_deps} (in the same order).}

\item{\code{accessor}}{\code{(function)} An accessor function that will be used to read the files from disk in the live app.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Instantiate with default app dependencies to be collected (if they exist) each time \code{\$gather_deps} is called
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$new(app_deps)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{app_deps}}{\code{(named list)} with items for each app that contain character vectors of the objects each app depends on to be saved.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
