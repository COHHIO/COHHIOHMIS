% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/app_dependencies.R
\name{app_env}
\alias{app_env}
\title{Easily extract dependencies and pass them between functions}
\description{
Save dependencies for future functions in an environment and put app dependencies into lists
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{\code{(list)}}}{with all app dependencies as objects}

\item{\code{\code{(list)}}}{with all app dependencies as character vectors}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{\code{(list)}}}{with all app dependencies as objects}

\item{\code{\code{(list)}}}{with all app dependencies as character vectors}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-merge_deps_to_env}{\code{app_env$merge_deps_to_env()}}
\item \href{#method-gather_deps}{\code{app_env$gather_deps()}}
\item \href{#method-set_parent}{\code{app_env$set_parent()}}
\item \href{#method-write_app_deps}{\code{app_env$write_app_deps()}}
\item \href{#method-dropbox_upload}{\code{app_env$dropbox_upload()}}
\item \href{#method-dropbox_auth}{\code{app_env$dropbox_auth()}}
\item \href{#method-new}{\code{app_env$new()}}
\item \href{#method-clone}{\code{app_env$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-merge_deps_to_env"></a>}}
\if{latex}{\out{\hypertarget{method-merge_deps_to_env}{}}}
\subsection{Method \code{merge_deps_to_env()}}{
Pass all dependencies saved from previous functions to an environment for use
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$merge_deps_to_env(..., env = rlang::caller_env(), as_list = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{\code{(environment)} to pass dependencies to. \strong{Default} the calling environment}

\item{\code{nms}}{\code{(character)} of the names of the dependencies to load into the \code{env}. \strong{Default} load all previously stored objects.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-gather_deps"></a>}}
\if{latex}{\out{\hypertarget{method-gather_deps}{}}}
\subsection{Method \code{gather_deps()}}{
Gather the objects passed to \code{app_env}s internal environment to be passed to subsequent functions. Save app dependencies into a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$gather_deps(
  ...,
  app_deps = FALSE,
  env = rlang::caller_env(),
  .args = names(rlang::fn_fmls(rlang::call_fn(rlang::call_standardise(match.call(call =
    sys.call(1))))))
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{\code{(objects)} Dependencies for subsequent functions, passed as objects and not character vector of names. Use \code{"everything"} to capture all objects from the parent environment.}

\item{\code{app_deps}}{\code{(named list)} with items for each app that contain character vectors of the objects each app depends on to be saved.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_parent"></a>}}
\if{latex}{\out{\hypertarget{method-set_parent}{}}}
\subsection{Method \code{set_parent()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$set_parent(vars_to_remove, env = rlang:::caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vars_to_remove}}{missing variables to remove from env that will otherwise mask the objects in the parent environment}

\item{\code{env}}{child environment}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write_app_deps"></a>}}
\if{latex}{\out{\hypertarget{method-write_app_deps}{}}}
\subsection{Method \code{write_app_deps()}}{
Write app dependencies to disk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$write_app_deps(
  objs,
  deps,
  path = file.path("data", "db", "RminorElevated"),
  overwrite = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deps}}{\code{(character)} with names of app dependencies.}

\item{\code{path}}{\code{(character)} of directory to write app dependencies to}

\item{\code{overwrite}}{\code{(logical)} Whether to overwrite existing files.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dropbox_upload"></a>}}
\if{latex}{\out{\hypertarget{method-dropbox_upload}{}}}
\subsection{Method \code{dropbox_upload()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$dropbox_upload(
  folder = file.path("data", "db", "RminorElevated"),
  db_folder = "RminorElevated"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-dropbox_auth"></a>}}
\if{latex}{\out{\hypertarget{method-dropbox_auth}{}}}
\subsection{Method \code{dropbox_auth()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$dropbox_auth(db_auth_token = "~/R/auth_tokens/db_token.rds")}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Instantiate with default app dependencies to be collected (if they exist) each time \code{\$gather_deps} is called
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$new(app_deps)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{app_deps}}{\code{(named list)} with items for each app that contain character vectors of the objects each app depends on to be saved.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{app_env$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
