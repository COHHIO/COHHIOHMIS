% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_DataQuality_utils.R
\name{dq_conflicting_hi_ee}
\alias{dq_conflicting_hi_ee}
\title{Find Conflicting Health Insurance at Entry/Exit}
\usage{
dq_conflicting_hi_ee(
  served_in_date_range,
  IncomeBenefits,
  vars,
  guidance,
  app_env = get_app_env(e = rlang::caller_env())
)
}
\arguments{
\item{served_in_date_range}{\code{(data.frame)} See \code{served_in_date_range}}

\item{IncomeBenefits}{\code{(data.frame)} From the HUD CSV Export}

\item{vars}{\code{(named list)}
\itemize{
\item{\code{prep}}{ Column names for Prep}
\item{\code{we_want}}{ Column names for output}
}}

\item{guidance}{\code{(list)} See \code{guidance}}

\item{app_env}{\code{(app_env)} Object containing dependencies. If all arguments to this function are saved in the \code{app_env}, then they will be called from there and arguments do not need to be specified.}
}
\value{
\code{(data.frame)} \code{vars$we_want} and \code{Issue} (Issue Name), \code{Type} (Error or Warning), and \code{Guidance} (How to correct the issue)
}
\description{
If the user answered 'Yes' to 'Covered by Health Insurance?', then there should be a Health Insurance subassessment where it indicates which type of health insurance the client is receiving. Similarly if the user answered 'No', there should not be any Health Insurance records that say the client is receiving that type of Health Insurance.
}
\seealso{
Other DQ: Health Insurance Checks: 
\code{\link{dq_missing_hi_entry}()},
\code{\link{dq_missing_hi_exit}()}
}
\concept{DQ: Health Insurance Checks}
